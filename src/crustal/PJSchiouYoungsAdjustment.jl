
using LaTeXStrings
using Plots
pyplot()

include("PJSchiouYoungs2014.jl")

# type PJSgmpe
# 	Sa::Float64
# 	lnSa::Float64
# 	τ::Float64
# 	ϕ::Float64
# 	sigma::Float64
# end


# make a modified version of Chiou & Youngs to reflect stress drop changes

# moment magnitude to seismic moment (in dyne-cm)
function magnitude_to_moment( m )
  Mo = 10.^( 1.5*( m + 10.7 ) )
  return Mo
end

# seismic moment (in dyne-cm) to moment magnitude
function moment_to_magnitude( Mo )
	m = 2*log10(Mo)/3 - 10.7
	return m
end

# corner frequency estimation computing seismic moments in dyne-cm
function corner_frequency( m, Δσ, β::Float64=3.6 )
  Mo = magnitude_to_moment( m )
  fc = 4.9058e6 * β * ( Δσ ./ Mo ).^(1/3)
  return fc
end

function magnitude_for_corner_frequency( fc, Δσ, β::Float64=3.6 )
	Mo = Δσ * ( 4.9058e6 * β / fc )^3
	m = moment_to_magnitude( Mo )
	return m
end

function corner_period( m, Δσ, β::Float64=3.6 )
	return 1.0./corner_frequency( m, Δσ, β )
end

corner_frequency( 6.0, 100.0 )
corner_period( 7.0, 150.0 )
magnitude_for_corner_frequency( 0.366, 100.0 )

function magnitude_change( Δσ1, Δσ0::Float64=100.0 )
	fref = 50.0
	m0 = magnitude_for_corner_frequency( fref, Δσ0 )
	m1 = magnitude_for_corner_frequency( fref, Δσ1 )
	Δm = m1-m0
	return Δm
end

magnitude_change( 40.0, 80.0 )
magnitude_change( 160.0, 80.0 )


function sigmoid(x, amp, centre, scale)
	return amp / (1 + exp(-log(x/centre)/scale) )
end

function comp_sigmoid(x, amp, centre, scale)
	return amp - sigmoid(x, amp, centre, scale)
end


plot(Ti, map(x -> sigmoid(x, 0.2, 0.5, 0.5), Ti), xaxis=:log10, ylim=(0,0.2) )
plot!(Ti, map(x -> comp_sigmoid(x, 0.2, 0.5, 0.5), Ti))

map(x -> comp_sigmoid(x, 0.2, corner_period(5.0, 100.0), ))


Ti = [ 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5, 10 ]
fi = 1./Ti

cmi_Δσ40 = map( fc -> magnitude_for_corner_frequency( fc, 40.0 ), fi )
cmi_Δσ80 = map( fc -> magnitude_for_corner_frequency( fc, 80.0 ), fi )
cmi_Δσ160 = map( fc -> magnitude_for_corner_frequency( fc, 160.0 ), fi )

cncy = [ 16.0875, 15.7118, 15.8819, 16.4556, 17.6453, 20.1772, 19.9992, 18.7106, 16.6246, 15.3709, 13.7012, 11.2667, 9.1908, 6.5459, 5.2305, 3.7896, 3.3024, 2.8498, 2.5417, 2.1488, 1.8957, 1.7228, 1.5737, 1.5265 ]

cmcy = [ 4.9993, 4.9993, 4.9993, 4.9993, 4.9993, 5.0031, 5.0172, 5.0315, 5.0547, 5.0704, 5.0939, 5.1315, 5.167, 5.2317, 5.2893, 5.4109, 5.5106, 5.6705, 5.7981, 5.9983, 6.1552, 6.2856, 6.5428, 6.7415 ]

plot( Ti, cmi_Δσ40, lab="Δσ 40", xaxis=:log10 )
plot!( Ti, cmi_Δσ80, lab="Δσ 80" )
plot!( Ti, cmi_Δσ160, lab="Δσ 160" )
plot!( Ti, cmcy, lab="CY" )

mi = linspace(4,7,301)

c2 = 1.06
c3 = 2.0
c3t = 3.45
cm = 5.5
cn = 10.0
#Δm = 0.2
Δm = magnitude_change(160.0, 80.0)

Δy = (c3-c3t)*Δm
α = atan(c3) - atan(c2)
γ = atan(1/c3)
β = π - α - γ
z = Δy * sin(β) / sin(α)
δm = z * cos(atan(c3))

lny0 = c2*(mi-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi)))
#lny0m = -c2*Δm + c2*(mi-Δm-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi-Δm)))
lny0m = (c2-c3)*Δm + c2*(mi-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi-Δm)))
lny0m1 = (c2-c3)*(Δm-δm) + c2*(mi-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi-(Δm-δm))))
#lny0p = c2*Δm + c2*(mi+Δm-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi+Δm)))
lny0p = -(c2-c3)*Δm + c2*(mi-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi+Δm)))
lny0p1 = -(c2-c3)*(Δm-δm) + c2*(mi-6.0) + (c2-c3)/cn * log.(1.0 + exp.(cn.*(cm-mi+(Δm-δm))))

#2Δm*c2
#(c2-c3)*Δm

plot(mi, lny0, color=:black, linestyle=:solid, lab="Δσ = Δσ0")
plot!(mi, lny0m, color=:black, linestyle=:dash, lab="Δσ- = Δσ0 / 2")
plot!(mi, lny0m1, color=:red, linestyle=:dash, lab="Δσ- = Δσ0 / 2")
plot!(mi, lny0p, color=:black, linestyle=:dashdot, lab="Δσ+ = 2 × Δσ0")
plot!(mi, lny0p1, color=:red, linestyle=:dashdot, lab="Δσ+ = 2 × Δσ0")
vline!([cm, cm-Δm, cm+Δm], linestyle=:dot, color=:grey, lab="")
annotate!([(cm+1.8Δm, -5.5, text(L"c_M(\Delta\sigma+)",10))])
annotate!([(cm, -5.5, text(L"c_M(\Delta\sigma0)",10))])
annotate!([(cm-1.8Δm, -5.5, text(L"c_M(\Delta\sigma-)",10))])
xlabel!("Magnitude")
ylabel!("Logarithmic amplitude")
savefig("figures/PJSchiouYoungsMagnitudeScaling.pdf")



function PJScy2014mod( T::Float64, M::Float64, Rrup::Float64, Rjb::Float64, Rx::Float64, ΔZtor::Float64, Dip::Float64, Fnm::Int64, Frv::Int64, Fhw::Int64, Vs30::Float64, Vs30meas::Int64=1, Δcm::Float64=0.0, ΔZ1p0::Float64=0.0, ΔDPP::Float64=0.0 )
	# coefficients
	Ti = [ 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5, 10 ]
	c1 = [ -1.5070, -1.4788, -1.3116, -1.1159, -0.9464, -0.6749, -0.5735, -0.5439, -0.5543, -0.5933, -0.6865, -0.8720, -1.0558, -1.3800, -1.6472, -2.1421, -2.5266, -3.0655, -3.4114, -3.8330, -4.1207, -4.3438, -4.7493, -5.0370 ]
	c1a = [ 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.1645, 0.1168, 0.0732, 0.0484, 0.022, 0.0124 ]
	c1b = [ -0.3729, -0.3772, -0.4429, -0.5122, -0.5544, -0.5929, -0.5760, -0.5583, -0.5345, -0.5188, -0.4944, -0.4517, -0.4122, -0.3532, -0.3101, -0.2219, -0.1694, -0.1376, -0.1218, -0.1053, -0.1008, -0.0996, -0.0994, -0.1000 ]
	c1c = [ -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1645, -0.1168, -0.0732, -0.0484, -0.0220, -0.0124 ]
	c1d = [ 0.1977, 0.218, 0.3484, 0.4733, 0.5433, 0.5621, 0.4633, 0.4, 0.3337, 0.2961, 0.2438, 0.162, 0.0881, -0.0287, -0.1158, -0.2708, -0.3527, -0.3454, -0.2605, -0.0914, -0.0306, -0.0129, -0.0014, 0.0001 ]
	cn = [ 16.0875, 15.7118, 15.8819, 16.4556, 17.6453, 20.1772, 19.9992, 18.7106, 16.6246, 15.3709, 13.7012, 11.2667, 9.1908, 6.5459, 5.2305, 3.7896, 3.3024, 2.8498, 2.5417, 2.1488, 1.8957, 1.7228, 1.5737, 1.5265 ]
	cm = [ 4.9993, 4.9993, 4.9993, 4.9993, 4.9993, 5.0031, 5.0172, 5.0315, 5.0547, 5.0704, 5.0939, 5.1315, 5.167, 5.2317, 5.2893, 5.4109, 5.5106, 5.6705, 5.7981, 5.9983, 6.1552, 6.2856, 6.5428, 6.7415 ]
	c3 = [ 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9795, 2.0362, 2.0823, 2.1521, 2.2574, 2.344, 2.4709, 2.5567, 2.6812, 2.7474, 2.8161, 2.8514, 2.8875, 2.9058, 2.9169, 2.932, 2.9396 ]
	c5 = [ 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.8305, 7.1333, 7.3621, 7.4365, 7.4972, 7.5416, 7.56, 7.5735, 7.5778, 7.5808, 7.5814, 7.5817, 7.5818, 7.5818, 7.5818, 7.5818, 7.5818, 7.5818 ]
	chm = [ 3.0956, 3.0963, 3.0974, 3.0988, 3.1011, 3.1094, 3.2381, 3.3407, 3.43, 3.4688, 3.5146, 3.5746, 3.6232, 3.6945, 3.7401, 3.7941, 3.8144, 3.8284, 3.833, 3.8361, 3.8369, 3.8376, 3.838, 3.838 ]
	c6 = [ 0.4893, 0.4892, 0.489, 0.4888, 0.4884, 0.4872, 0.4854, 0.4837, 0.4808, 0.4787, 0.4755, 0.4706, 0.4665, 0.4607, 0.4571, 0.4531, 0.4517, 0.4507, 0.4504, 0.4501, 0.4501, 0.45, 0.45, 0.45 ]
	c7 = [ 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0160, 0.0062, 0.0029, 0.0007, 0.0003 ]
	c7b = [ 0.0462, 0.0472, 0.0533, 0.0596, 0.0639, 0.063, 0.0532, 0.0452, 0.0345, 0.0283, 0.0202, 0.009, -0.0004, -0.0155, -0.0278, -0.0477, -0.0559, -0.0630, -0.0665, -0.0516, -0.0448, -0.0424, -0.0348, -0.0253 ]
	c8b = [ 0.4833, 1.2144, 1.6421, 1.9456, 2.181, 2.6087, 2.9122, 3.1045, 3.3399, 3.4719, 3.6434, 3.8787, 4.0711, 4.3745, 4.6099, 5.0376, 5.3411, 5.7688, 6.0723, 6.5, 6.8035, 7.0389, 7.4666, 7.77 ]
	c9 = [ 0.9228, 0.9296, 0.9396, 0.9661, 0.9794, 1.026, 1.0177, 1.0008, 0.9801, 0.9652, 0.9459, 0.9196, 0.8829, 0.8302, 0.7884, 0.6754, 0.6196, 0.5101, 0.3917, 0.1244, 0.0086, 0, 0, 0 ]
	c9a = [ 0.1202, 0.1217, 0.1194, 0.1166, 0.1176, 0.1171, 0.1146, 0.1128, 0.1106, 0.115, 0.1208, 0.1208, 0.1175, 0.106, 0.1061, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1 ]
	c9b = [ 6.8607, 6.8697, 6.9113, 7.0271, 7.0959, 7.3298, 7.2588, 7.2372, 7.2109, 7.2491, 7.2988, 7.3691, 6.8789, 6.5334, 6.526, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5 ]
	c11 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	c11b = [ -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4440, -0.3539, -0.2688, -0.1793, -0.1428, -0.1138, -0.1062, -0.1020, -0.1009, -0.1003, -0.1001, -0.1001, -0.1000, -0.1000 ]
	cg1 = [ -0.007141, -0.007226, -0.007520, -0.007881, -0.008295, -0.009266, -0.009710, -0.009806, -0.009805, -0.009733, -0.009505, -0.008918, -0.008251, -0.007267, -0.006492, -0.005147, -0.004277, -0.002979, -0.002301, -0.001344, -0.001084, -0.000994, -0.000964, -0.000950 ]
	cg2 = [ -0.006768, -0.006929, -0.007160, -0.007477, -0.007460, -0.006565, -0.005490, -0.004840, -0.003897, -0.003334, -0.002690, -0.002127, -0.001812, -0.001274, -0.001074, -0.001115, -0.001197, -0.001671, -0.002237, -0.003108, -0.003670, -0.003767, -0.003784, -0.003747 ]
	cg3 = [ 4.1293, 4.0715, 4.0009, 3.9647, 3.9832, 4.1949, 4.4844, 4.673, 4.8266, 4.867, 4.8796, 4.8371, 4.7579, 4.5523, 4.4049, 4.2079, 4.0126, 3.6733, 3.5073, 3.4748, 3.5179, 3.5479, 3.5954, 3.6253 ]
	ϕ1 = [ -0.5210, -0.5055, -0.4368, -0.3752, -0.3469, -0.3747, -0.4440, -0.4895, -0.5477, -0.5922, -0.6693, -0.7766, -0.8501, -0.9431, -1.0044, -1.0602, -1.0941, -1.1142, -1.1154, -1.1081, -1.0603, -0.9872, -0.8274, -0.7053 ]
	ϕ2 = [ -0.1417, -0.1364, -0.1403, -0.1591, -0.1862, -0.2538, -0.2943, -0.3077, -0.3113, -0.3062, -0.2927, -0.2662, -0.2405, -0.1975, -0.1633, -0.1028, -0.0699, -0.0425, -0.0302, -0.0129, -0.0016, 0, 0, 0 ]
	ϕ3 = [ -0.007010 , -0.007279, -0.007354, -0.006977, -0.006467, -0.005734, -0.005604, -0.005696, -0.005845, -0.005959, -0.006141, -0.006439, -0.006704, -0.007125, -0.007435, -0.008120, -0.008444, -0.007707, -0.004792, -0.001828, -0.001523, -0.001440, -0.001369, -0.001361 ]
	ϕ4 = [ 0.102151, 0.10836, 0.119888, 0.133641, 0.148927, 0.190596, 0.230662, 0.253169, 0.266468, 0.26506, 0.255253, 0.231541, 0.207277, 0.165464, 0.133828, 0.085153, 0.058595, 0.031787, 0.019716, 0.009643, 0.005379, 0.003223, 0.001134, 0.000515 ]
	ϕ5 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.034, 0.067, 0.143, 0.203, 0.277, 0.309, 0.321, 0.329, 0.33 ]
	ϕ6 = [ 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300 ]
	τ1 = [ 0.401, 0.408, 0.432, 0.446, 0.467, 0.486, 0.468, 0.453, 0.417, 0.403, 0.386, 0.369, 0.368, 0.376, 0.375, 0.388, 0.434, 0.496, 0.511, 0.477, 0.516, 0.508, 0.434, 0.332 ]
	τ2 = [ 0.247, 0.242, 0.232, 0.246, 0.275, 0.419, 0.427, 0.384, 0.297, 0.256, 0.231, 0.207, 0.198, 0.17, 0.171, 0.178, 0.233, 0.218, 0.231, 0.275, 0.33, 0.337, 0.329, 0.404 ]
	σ1 = [ 0.553, 0.5567, 0.5676, 0.5816, 0.5933, 0.5976, 0.5868, 0.5892, 0.5892, 0.5877, 0.5799, 0.5643, 0.5525, 0.5338, 0.5228, 0.487, 0.4699, 0.4452, 0.4221, 0.4135, 0.3982, 0.3857, 0.3641, 0.3495 ]
	σ2 = [ 0.4106, 0.4107, 0.4136, 0.4197, 0.4265, 0.4544, 0.4761, 0.4795, 0.4798, 0.4839, 0.4848, 0.4796, 0.4813, 0.4824, 0.4837, 0.5089, 0.5158, 0.5326, 0.5335, 0.4866, 0.4769, 0.4552, 0.4467, 0.3973 ]
	σ3 = [ 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7999, 0.7997, 0.7988, 0.7966, 0.7792, 0.7504, 0.7136, 0.7035, 0.7006, 0.7001, 0.7, 0.7, 0.7 ]

	c2 = 1.06
	c4 = -2.1
	c4a = -0.5
	crb = 50
	c8 = 0.2153
	c8a = 0.2695

	# check bounds on the allowable value of T
	T = ( T < 0.01 ) ? 0.01 : ( T > 10.0 ) ? 10.0 : T

	tidHI = 1
	while Ti[tidHI] < T
		tidHI += 1
	end
	if Ti[tidHI] == T
		tidLO = tidHI
	else
		tidLO = tidHI - 1
	end

	if ( tidLO == tidHI )
		# we have a known period
		tid = tidHI

		# need to compute the expected depth to top of rupture
		if Frv == 1
			EZtor = max(2.704 - 1.226*max(M-5.849,0.0),0.0)^2
		else
			EZtor = max(2.673 - 1.136*max(M-4.970,0.0),0.0)^2
		end
		Ztor = EZtor + ΔZtor

		lnYref = c1[tid] +
			( c1a[tid] + c1c[tid]/cosh(2*max(Mw-4.5,0.0)) )*Frv +
			( c1b[tid] + c1d[tid]/cosh(2*max(Mw-4.5,0.0)) )*Fnm +
			( c7[tid]  + c7b[tid]/cosh(2*max(Mw-4.5,0.0)) )*ΔZtor +
			( c11[tid] + c11b[tid]/cosh(2*max(Mw-4.5,0.0)) )*cosd(Dip)^2 +
			c2*(Mw-6.0) + ((c2-c3[tid])/cn[tid])*log(1.0 + exp( cn[tid]*(cm[tid]+Δcm-Mw) )) - (c2-c3[tid])*Δcm +
			c4*log( Rrup + c5[tid]*cosh( c6[tid]*max(Mw-chm[tid],0.0) ) ) +
			(c4a-c4)*log( sqrt( Rrup*Rrup + crb*crb ) ) +
			( cg1[tid] + cg2[tid]/cosh(max(Mw-cg3[tid],0.0)) )*Rrup +
			c8*max( 1.0 - max(Rrup-40.0,0.0)/30.0, 0.0 )*min( max(Mw-5.5,0.0)/0.8, 1.0 )*exp( -c8a*(Mw-c8b[tid]) )* ΔDPP +
			c9[tid]*Fhw*cos(Dip*pi/180.)*( c9a[tid] + (1.0-c9a[tid])*tanh( Rx / c9b[tid] ) )*( 1.0 - sqrt(Rjb*Rjb+Ztor*Ztor)/(Rrup+1.0) )
		lnSa = lnYref +
			ϕ1[tid]*min(log(Vs30/1130.0),0.0) +
			ϕ2[tid]*( exp(ϕ3[tid]*(min(Vs30,1130.0)-360.0)) - exp(ϕ3[tid]*(1130.0-360.0)))*log( ( exp(lnYref) + ϕ4[tid] ) / ϕ4[tid] ) +
			ϕ5[tid]*( 1.0 - exp( -ΔZ1p0/ϕ6[tid] ) )
		Sa = exp( lnSa )

		NL = ϕ2[tid]*( exp(ϕ3[tid]*(min(Vs30,1130.0)-360.0)) - exp(ϕ3[tid]*(1130.0-360.0))) * ( exp(lnYref) / ( exp(lnYref) + ϕ4[tid] ) )
		τ = ( τ1[tid] + ( τ2[tid] - τ1[tid] )*( min( max( Mw, 5.0 ), 7.25 ) - 5.0 ) / 2.25 ) * (1.0+NL)
		ϕ = ( σ1[tid] + ( σ2[tid] - σ1[tid] )*( min( max( Mw, 5.0 ), 7.25 ) - 5.0 ) / 2.25 ) * sqrt( ifelse( Vs30meas==1, 0.7, σ3[tid] ) + ( 1.0 + NL )^2 )
		σ = sqrt( τ^2 + ϕ^2 )

	else
		# we need to interpolate
		cyLO = PJScy2014mod( Ti[tidLO], Mw, Rrup, Rjb, Rx, Ztor, Dip, Fnm, Frv, Fhw, Vs30, Vs30meas, Δcm, ΔZ1p0, ΔDPP )
		cyHI = PJScy2014mod( Ti[tidHI], Mw, Rrup, Rjb, Rx, Ztor, Dip, Fnm, Frv, Fhw, Vs30, Vs30meas, Δcm, ΔZ1p0, ΔDPP )

		lnSa = cyLO.lnSa + log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.lnSa-cyLO.lnSa)
		Sa = exp( lnSa )

		τ = cyLO.τ +  log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.τ-cyLO.τ)
		ϕ = cyLO.ϕ +  log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.ϕ-cyLO.ϕ)
		σ = cyLO.σ +  log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.σ-cyLO.σ)
	end

	gmpe = PJSgmpe( Sa, lnSa, τ, ϕ, σ )
	return gmpe
end

function PJScy2014theory( T::Float64, Mw::Float64, Rrup::Float64, Rjb::Float64, Rx::Float64, ΔZtor::Float64, Dip::Float64, Fnm::Int64, Frv::Int64, Fhw::Int64, Vs30::Float64, Vs30meas::Int64=1, Δcm::Float64=0.0, ΔZ1p0::Float64=0.0, ΔDPP::Float64=0.0 )
	# coefficients
	Ti = [ 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5, 10 ]
	c1 = [ -1.5070, -1.4788, -1.3116, -1.1159, -0.9464, -0.6749, -0.5735, -0.5439, -0.5543, -0.5933, -0.6865, -0.8720, -1.0558, -1.3800, -1.6472, -2.1421, -2.5266, -3.0655, -3.4114, -3.8330, -4.1207, -4.3438, -4.7493, -5.0370 ]
	c1a = [ 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.1645, 0.1168, 0.0732, 0.0484, 0.022, 0.0124 ]
	c1b = [ -0.3729, -0.3772, -0.4429, -0.5122, -0.5544, -0.5929, -0.5760, -0.5583, -0.5345, -0.5188, -0.4944, -0.4517, -0.4122, -0.3532, -0.3101, -0.2219, -0.1694, -0.1376, -0.1218, -0.1053, -0.1008, -0.0996, -0.0994, -0.1000 ]
	c1c = [ -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1645, -0.1168, -0.0732, -0.0484, -0.0220, -0.0124 ]
	c1d = [ 0.1977, 0.218, 0.3484, 0.4733, 0.5433, 0.5621, 0.4633, 0.4, 0.3337, 0.2961, 0.2438, 0.162, 0.0881, -0.0287, -0.1158, -0.2708, -0.3527, -0.3454, -0.2605, -0.0914, -0.0306, -0.0129, -0.0014, 0.0001 ]
	cn = [ 16.0875, 15.7118, 15.8819, 16.4556, 17.6453, 20.1772, 19.9992, 18.7106, 16.6246, 15.3709, 13.7012, 11.2667, 9.1908, 6.5459, 5.2305, 3.7896, 3.3024, 2.8498, 2.5417, 2.1488, 1.8957, 1.7228, 1.5737, 1.5265 ]
	cm = [ 4.9993, 4.9993, 4.9993, 4.9993, 4.9993, 5.0031, 5.0172, 5.0315, 5.0547, 5.0704, 5.0939, 5.1315, 5.167, 5.2317, 5.2893, 5.4109, 5.5106, 5.6705, 5.7981, 5.9983, 6.1552, 6.2856, 6.5428, 6.7415 ]
	c3 = [ 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9795, 2.0362, 2.0823, 2.1521, 2.2574, 2.344, 2.4709, 2.5567, 2.6812, 2.7474, 2.8161, 2.8514, 2.8875, 2.9058, 2.9169, 2.932, 2.9396 ]
	c5 = [ 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.8305, 7.1333, 7.3621, 7.4365, 7.4972, 7.5416, 7.56, 7.5735, 7.5778, 7.5808, 7.5814, 7.5817, 7.5818, 7.5818, 7.5818, 7.5818, 7.5818, 7.5818 ]
	chm = [ 3.0956, 3.0963, 3.0974, 3.0988, 3.1011, 3.1094, 3.2381, 3.3407, 3.43, 3.4688, 3.5146, 3.5746, 3.6232, 3.6945, 3.7401, 3.7941, 3.8144, 3.8284, 3.833, 3.8361, 3.8369, 3.8376, 3.838, 3.838 ]
	c6 = [ 0.4893, 0.4892, 0.489, 0.4888, 0.4884, 0.4872, 0.4854, 0.4837, 0.4808, 0.4787, 0.4755, 0.4706, 0.4665, 0.4607, 0.4571, 0.4531, 0.4517, 0.4507, 0.4504, 0.4501, 0.4501, 0.45, 0.45, 0.45 ]
	c7 = [ 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0352, 0.0160, 0.0062, 0.0029, 0.0007, 0.0003 ]
	c7b = [ 0.0462, 0.0472, 0.0533, 0.0596, 0.0639, 0.063, 0.0532, 0.0452, 0.0345, 0.0283, 0.0202, 0.009, -0.0004, -0.0155, -0.0278, -0.0477, -0.0559, -0.0630, -0.0665, -0.0516, -0.0448, -0.0424, -0.0348, -0.0253 ]
	c8b = [ 0.4833, 1.2144, 1.6421, 1.9456, 2.181, 2.6087, 2.9122, 3.1045, 3.3399, 3.4719, 3.6434, 3.8787, 4.0711, 4.3745, 4.6099, 5.0376, 5.3411, 5.7688, 6.0723, 6.5, 6.8035, 7.0389, 7.4666, 7.77 ]
	c9 = [ 0.9228, 0.9296, 0.9396, 0.9661, 0.9794, 1.026, 1.0177, 1.0008, 0.9801, 0.9652, 0.9459, 0.9196, 0.8829, 0.8302, 0.7884, 0.6754, 0.6196, 0.5101, 0.3917, 0.1244, 0.0086, 0, 0, 0 ]
	c9a = [ 0.1202, 0.1217, 0.1194, 0.1166, 0.1176, 0.1171, 0.1146, 0.1128, 0.1106, 0.115, 0.1208, 0.1208, 0.1175, 0.106, 0.1061, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1 ]
	c9b = [ 6.8607, 6.8697, 6.9113, 7.0271, 7.0959, 7.3298, 7.2588, 7.2372, 7.2109, 7.2491, 7.2988, 7.3691, 6.8789, 6.5334, 6.526, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5 ]
	c11 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	c11b = [ -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4440, -0.3539, -0.2688, -0.1793, -0.1428, -0.1138, -0.1062, -0.1020, -0.1009, -0.1003, -0.1001, -0.1001, -0.1000, -0.1000 ]
	cg1 = [ -0.007141, -0.007226, -0.007520, -0.007881, -0.008295, -0.009266, -0.009710, -0.009806, -0.009805, -0.009733, -0.009505, -0.008918, -0.008251, -0.007267, -0.006492, -0.005147, -0.004277, -0.002979, -0.002301, -0.001344, -0.001084, -0.000994, -0.000964, -0.000950 ]
	cg2 = [ -0.006768, -0.006929, -0.007160, -0.007477, -0.007460, -0.006565, -0.005490, -0.004840, -0.003897, -0.003334, -0.002690, -0.002127, -0.001812, -0.001274, -0.001074, -0.001115, -0.001197, -0.001671, -0.002237, -0.003108, -0.003670, -0.003767, -0.003784, -0.003747 ]
	cg3 = [ 4.1293, 4.0715, 4.0009, 3.9647, 3.9832, 4.1949, 4.4844, 4.673, 4.8266, 4.867, 4.8796, 4.8371, 4.7579, 4.5523, 4.4049, 4.2079, 4.0126, 3.6733, 3.5073, 3.4748, 3.5179, 3.5479, 3.5954, 3.6253 ]
	ϕ1 = [ -0.5210, -0.5055, -0.4368, -0.3752, -0.3469, -0.3747, -0.4440, -0.4895, -0.5477, -0.5922, -0.6693, -0.7766, -0.8501, -0.9431, -1.0044, -1.0602, -1.0941, -1.1142, -1.1154, -1.1081, -1.0603, -0.9872, -0.8274, -0.7053 ]
	ϕ2 = [ -0.1417, -0.1364, -0.1403, -0.1591, -0.1862, -0.2538, -0.2943, -0.3077, -0.3113, -0.3062, -0.2927, -0.2662, -0.2405, -0.1975, -0.1633, -0.1028, -0.0699, -0.0425, -0.0302, -0.0129, -0.0016, 0, 0, 0 ]
	ϕ3 = [ -0.007010 , -0.007279, -0.007354, -0.006977, -0.006467, -0.005734, -0.005604, -0.005696, -0.005845, -0.005959, -0.006141, -0.006439, -0.006704, -0.007125, -0.007435, -0.008120, -0.008444, -0.007707, -0.004792, -0.001828, -0.001523, -0.001440, -0.001369, -0.001361 ]
	ϕ4 = [ 0.102151, 0.10836, 0.119888, 0.133641, 0.148927, 0.190596, 0.230662, 0.253169, 0.266468, 0.26506, 0.255253, 0.231541, 0.207277, 0.165464, 0.133828, 0.085153, 0.058595, 0.031787, 0.019716, 0.009643, 0.005379, 0.003223, 0.001134, 0.000515 ]
	ϕ5 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.034, 0.067, 0.143, 0.203, 0.277, 0.309, 0.321, 0.329, 0.33 ]
	ϕ6 = [ 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300 ]
	τ1 = [ 0.401, 0.408, 0.432, 0.446, 0.467, 0.486, 0.468, 0.453, 0.417, 0.403, 0.386, 0.369, 0.368, 0.376, 0.375, 0.388, 0.434, 0.496, 0.511, 0.477, 0.516, 0.508, 0.434, 0.332 ]
	τ2 = [ 0.247, 0.242, 0.232, 0.246, 0.275, 0.419, 0.427, 0.384, 0.297, 0.256, 0.231, 0.207, 0.198, 0.17, 0.171, 0.178, 0.233, 0.218, 0.231, 0.275, 0.33, 0.337, 0.329, 0.404 ]
	σ1 = [ 0.553, 0.5567, 0.5676, 0.5816, 0.5933, 0.5976, 0.5868, 0.5892, 0.5892, 0.5877, 0.5799, 0.5643, 0.5525, 0.5338, 0.5228, 0.487, 0.4699, 0.4452, 0.4221, 0.4135, 0.3982, 0.3857, 0.3641, 0.3495 ]
	σ2 = [ 0.4106, 0.4107, 0.4136, 0.4197, 0.4265, 0.4544, 0.4761, 0.4795, 0.4798, 0.4839, 0.4848, 0.4796, 0.4813, 0.4824, 0.4837, 0.5089, 0.5158, 0.5326, 0.5335, 0.4866, 0.4769, 0.4552, 0.4467, 0.3973 ]
	σ3 = [ 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7999, 0.7997, 0.7988, 0.7966, 0.7792, 0.7504, 0.7136, 0.7035, 0.7006, 0.7001, 0.7, 0.7, 0.7 ]

	c2 = 1.06
	c4 = -2.1
	c4a = -0.5
	crb = 50
	c8 = 0.2153
	c8a = 0.2695
	c3t = 3.45

	# check bounds on the allowable value of T
	T = ( T < 0.01 ) ? 0.01 : ( T > 10.0 ) ? 10.0 : T

	tidHI = 1
	while Ti[tidHI] < T
		tidHI += 1
	end
	if Ti[tidHI] == T
		tidLO = tidHI
	else
		tidLO = tidHI - 1
	end

	if ( tidLO == tidHI )
		# we have a known period
		tid = tidHI

		# find the additional adjustment required for theoretical consistency
		Δy = (c3[tid]-c3t)*Δcm
		α = atan(c3[tid]) - atan(c2)
		γ = atan(1/c3[tid])
		β = π - α - γ
		z = Δy * sin(β) / sin(α)
		δm = z * cos(atan(c3[tid]))

		lnYref = c1[tid] +
			( c1a[tid] + c1c[tid]/cosh(2*max(Mw-4.5,0.0)) )*Frv +
			( c1b[tid] + c1d[tid]/cosh(2*max(Mw-4.5,0.0)) )*Fnm +
			( c7[tid]  + c7b[tid]/cosh(2*max(Mw-4.5,0.0)) )*ΔZtor +
			( c11[tid] + c11b[tid]/cosh(2*max(Mw-4.5,0.0)) )*cosd(Dip)^2 +
			c2*(Mw-6.0) + ((c2-c3[tid])/cn[tid])*log(1.0 + exp( cn[tid]*(cm[tid]+(Δcm-δm)-Mw) )) - (c2-c3[tid])*(Δcm-δm) +
			c4*log( Rrup + c5[tid]*cosh( c6[tid]*max(Mw-chm[tid],0.0) ) ) +
			(c4a-c4)*log( sqrt( Rrup*Rrup + crb*crb ) ) +
			( cg1[tid] + cg2[tid]/cosh(max(Mw-cg3[tid],0.0)) )*Rrup +
			c8*max( 1.0 - max(Rrup-40.0,0.0)/30.0, 0.0 )*min( max(Mw-5.5,0.0)/0.8, 1.0 )*exp( -c8a*(Mw-c8b[tid]) )* ΔDPP +
			c9[tid]*Fhw*cosd(Dip)*( c9a[tid] + (1.0-c9a[tid])*tanh( Rx / c9b[tid] ) )*( 1.0 - sqrt(Rjb^2+Ztor^2)/(Rrup+1.0) )
		lnSa = lnYref +
			ϕ1[tid]*min(log(Vs30/1130.0),0.0) +
			ϕ2[tid]*( exp(ϕ3[tid]*(min(Vs30,1130.0)-360.0)) - exp(ϕ3[tid]*(1130.0-360.0)))*log( ( exp(lnYref) + ϕ4[tid] ) / ϕ4[tid] ) +
			ϕ5[tid]*( 1.0 - exp( -ΔZ1p0/ϕ6[tid] ) )
		Sa = exp( lnSa )

		NL = ϕ2[tid]*( exp(ϕ3[tid]*(min(Vs30,1130.0)-360.0)) - exp(ϕ3[tid]*(1130.0-360.0))) * ( exp(lnYref) / ( exp(lnYref) + ϕ4[tid] ) )
		τ = ( τ1[tid] + ( τ2[tid] - τ1[tid] )*( min( max( Mw, 5.0 ), 7.25 ) - 5.0 ) / 2.25 ) * (1.0+NL)
		ϕ = ( σ1[tid] + ( σ2[tid] - σ1[tid] )*( min( max( Mw, 5.0 ), 7.25 ) - 5.0 ) / 2.25 ) * sqrt( ifelse( Vs30meas==1, 0.7, σ3[tid] ) + ( 1.0 + NL )^2 )
		σ = sqrt( τ^2 + ϕ^2 )

	else
		# we need to interpolate
		cyLO = PJScy2014theory( Ti[tidLO], Mw, Rrup, Rjb, Rx, Ztor, Dip, Fnm, Frv, Fhw, Vs30, Vs30meas, Δcm, ΔZ1p0, ΔDPP )
		cyHI = PJScy2014theory( Ti[tidHI], Mw, Rrup, Rjb, Rx, Ztor, Dip, Fnm, Frv, Fhw, Vs30, Vs30meas, Δcm, ΔZ1p0, ΔDPP )

		lnSa = cyLO.lnSa + log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.lnSa-cyLO.lnSa)
		Sa = exp( lnSa )

		τ = cyLO.τ +  log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.τ-cyLO.τ)
		ϕ = cyLO.ϕ +  log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.ϕ-cyLO.ϕ)
		σ = cyLO.σ +  log(T/Ti[tidLO])/log(Ti[tidHI]/Ti[tidLO])*(cyHI.σ-cyLO.σ)
	end

	gmpe = PJSgmpe( Sa, lnSa, τ, ϕ, σ )
	return gmpe
end



Tref = 0.5
mi = linspace(4,8,401)
Sa_Mi_cy0 = map(x -> PJScy2014mod(Tref, x, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, mi)
Sa_Mi_cym = map(x -> PJScy2014mod(Tref, x, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, mi)
Sa_Mi_cyp = map(x -> PJScy2014mod(Tref, x, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, mi)

plot(mi, Sa_Mi_cy0, lab="ref", yaxis=:log10)
plot!(mi, Sa_Mi_cym, lab="-")
plot!(mi, Sa_Mi_cyp, lab="+")

c2 = 1.06
Ti = [ 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5, 10 ]
c3 = [ 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9636, 1.9795, 2.0362, 2.0823, 2.1521, 2.2574, 2.344, 2.4709, 2.5567, 2.6812, 2.7474, 2.8161, 2.8514, 2.8875, 2.9058, 2.9169, 2.932, 2.9396 ]
c308 = 3.45

plot(Ti, Δmhi*(c2-c3), xaxis=:log10, ylim=(-0.5,-0.1))
plot!(Ti, -2*Δmhi*c2*ones(Ti))
plot!(Ti, Δmhi*(c2-c308)*ones(Ti))



Ti = logspace(-2,1,101)

rrup = 100.0
Δσ0 = 80.0
Δσlo = Δσ0/2
Δσhi = Δσ0*2

Δm0 = 0.0
Δmlo = magnitude_change( Δσlo, Δσ0 )
Δmhi = magnitude_change( Δσhi, Δσ0 )


Sa_M5_cy = map(x -> PJScy2014(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
Sa_M6_cy = map(x -> PJScy2014(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
Sa_M7_cy = map(x -> PJScy2014(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)

# modified versions
Sa_M5_cy0 = map(x -> PJScy2014mod(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
Sa_M6_cy0 = map(x -> PJScy2014mod(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
Sa_M7_cy0 = map(x -> PJScy2014mod(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
# lo
Sa_M5_cylo = map(x -> PJScy2014mod(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, Ti)
Sa_M6_cylo = map(x -> PJScy2014mod(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, Ti)
Sa_M7_cylo = map(x -> PJScy2014mod(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, Ti)
# hi
Sa_M5_cyhi = map(x -> PJScy2014mod(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, Ti)
Sa_M6_cyhi = map(x -> PJScy2014mod(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, Ti)
Sa_M7_cyhi = map(x -> PJScy2014mod(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, Ti)

# modified theoretical versions
Sa_M5_cyt0 = map(x -> PJScy2014theory(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
Sa_M6_cyt0 = map(x -> PJScy2014theory(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
Sa_M7_cyt0 = map(x -> PJScy2014theory(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1).Sa, Ti)
# lo
Sa_M5_cytlo = map(x -> PJScy2014theory(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, Ti)
Sa_M6_cytlo = map(x -> PJScy2014theory(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, Ti)
Sa_M7_cytlo = map(x -> PJScy2014theory(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmlo).Sa, Ti)
# hi
Sa_M5_cythi = map(x -> PJScy2014theory(x, 5.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, Ti)
Sa_M6_cythi = map(x -> PJScy2014theory(x, 6.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, Ti)
Sa_M7_cythi = map(x -> PJScy2014theory(x, 7.5, rrup, rrup, rrup, 0.0, 90.0, 0, 0, 0, 760.0, 1, Δmhi).Sa, Ti)

# plot(Ti, Sa_M6_cy, xaxis=:log10, yaxis=:log10)
# plot!(Ti, Sa_M6_cy0)
# plot!(Ti, Sa_M6_cylo)
# plot!(Ti, Sa_M6_cyhi)



pr = plot( Ti, Sa_M5_cylo, color=:blue, linestyle=:dash, lab="M 5.5, Δσ=Δσ_cy/2", xaxis=:log10, yaxis=:log10, ylim=(10^-4.5,10^-0.5) )
plot!( Ti, Sa_M5_cy0, color=:blue, lab="M 5.5, Δσ=Δσ_cy" )
plot!( Ti, Sa_M5_cyhi, color=:blue, linestyle=:dashdot, lab="M 5.5, Δσ=2×Δσ_cy" )
# plot!( Ti, Sa_M5_cytlo, color=:blue, linealpha=0.5, linestyle=:dash, lab="M 5.5, Δσ=2×Δσ_cy" )
# plot!( Ti, Sa_M5_cythi, color=:blue, linealpha=0.5, linestyle=:dashdot, lab="M 5.5, Δσ=2×Δσ_cy" )

plot!( Ti, Sa_M6_cylo, color=:black, linestyle=:dash, lab="M 6.5, Δσ=Δσ_cy/2" )
plot!( Ti, Sa_M6_cy0, color=:black, lab="M 6.5, Δσ=Δσ_cy" )
plot!( Ti, Sa_M6_cyhi, color=:black, linestyle=:dashdot, lab="M 6.5, Δσ=2×Δσ_cy" )
# plot!( Ti, Sa_M6_cytlo, color=:black, linealpha=0.5, linestyle=:dash, lab="M 6.5, Δσ=2×Δσ_cy" )
# plot!( Ti, Sa_M6_cythi, color=:black, linealpha=0.5, linestyle=:dashdot, lab="M 6.5, Δσ=2×Δσ_cy" )

plot!( Ti, Sa_M7_cylo, color=:red, linestyle=:dash, lab="M 7.5, Δσ=Δσ_cy/2" )
plot!( Ti, Sa_M7_cy0, color=:red, lab="M 7.5, Δσ=Δσ_cy" )
plot!( Ti, Sa_M7_cyhi, color=:red, linestyle=:dashdot, lab="M 7.5, Δσ=2×Δσ_cy" )
# plot!( Ti, Sa_M7_cytlo, color=:red, linealpha=0.5, linestyle=:dash, lab="M 7.5, Δσ=2×Δσ_cy" )
# plot!( Ti, Sa_M7_cythi, color=:red, linealpha=0.5, linestyle=:dashdot, lab="M 7.5, Δσ=2×Δσ_cy" )
xlabel!("Period (s)")
ylabel!("Spectral acceleration (g)")


prt = plot( Ti, Sa_M5_cytlo, color=:blue, linestyle=:dash, lab="M 5.5, Δσ=Δσ_cy/2", xaxis=:log10, yaxis=:log10, ylim=(10^-4.5,10^-0.5) )
plot!( Ti, Sa_M5_cy0, color=:blue, lab="M 5.5, Δσ=Δσ_cy" )
plot!( Ti, Sa_M5_cythi, color=:blue, linestyle=:dashdot, lab="M 5.5, Δσ=2×Δσ_cy" )

plot!( Ti, Sa_M6_cytlo, color=:black, linestyle=:dash, lab="M 6.5, Δσ=Δσ_cy/2" )
plot!( Ti, Sa_M6_cy0, color=:black, lab="M 6.5, Δσ=Δσ_cy" )
plot!( Ti, Sa_M6_cythi, color=:black, linestyle=:dashdot, lab="M 6.5, Δσ=2×Δσ_cy" )

plot!( Ti, Sa_M7_cytlo, color=:red, linestyle=:dash, lab="M 7.5, Δσ=Δσ_cy/2" )
plot!( Ti, Sa_M7_cy0, color=:red, lab="M 7.5, Δσ=Δσ_cy" )
plot!( Ti, Sa_M7_cythi, color=:red, linestyle=:dashdot, lab="M 7.5, Δσ=2×Δσ_cy" )
xlabel!("Period (s)")
ylabel!("Spectral acceleration (g)")

# κ0 of 0.04
κ0 = 0.04
# Δσ of 40, 80, 160
Δσ1 = 40.0
Δσ2 = 80.0
Δσ3 = 160.0

Sa_M5_Δσ1_κ0 = map(x -> PJSha2018cal(x, 5.5, rrup, Δσ1, κ0), Ti)
Sa_M5_Δσ2_κ0 = map(x -> PJSha2018cal(x, 5.5, rrup, Δσ2, κ0), Ti)
Sa_M5_Δσ3_κ0 = map(x -> PJSha2018cal(x, 5.5, rrup, Δσ3, κ0), Ti)
Sa_M6_Δσ1_κ0 = map(x -> PJSha2018cal(x, 6.5, rrup, Δσ1, κ0), Ti)
Sa_M6_Δσ2_κ0 = map(x -> PJSha2018cal(x, 6.5, rrup, Δσ2, κ0), Ti)
Sa_M6_Δσ3_κ0 = map(x -> PJSha2018cal(x, 6.5, rrup, Δσ3, κ0), Ti)
Sa_M7_Δσ1_κ0 = map(x -> PJSha2018cal(x, 7.5, rrup, Δσ1, κ0), Ti)
Sa_M7_Δσ2_κ0 = map(x -> PJSha2018cal(x, 7.5, rrup, Δσ2, κ0), Ti)
Sa_M7_Δσ3_κ0 = map(x -> PJSha2018cal(x, 7.5, rrup, Δσ3, κ0), Ti)

pl = plot(Ti, Sa_M5_Δσ1_κ0, seriescolor=:blue, linestyle=:dash, lab="M 5.5, Δσ 40", xaxis=:log10, yaxis=:log10, ylim=(10^-4.5,10^-0.5) )
plot!(Ti, Sa_M5_Δσ2_κ0, seriescolor=:blue, linestyle=:solid, lab="M 5.5, Δσ 80")
plot!(Ti, Sa_M5_Δσ3_κ0, seriescolor=:blue, linestyle=:dashdot, lab="M 5.5, Δσ 160")
plot!(Ti, Sa_M6_Δσ1_κ0, seriescolor=:black, linestyle=:solid, lab="M 6.5, Δσ 40")
plot!(Ti, Sa_M6_Δσ2_κ0, seriescolor=:black, linestyle=:solid, lab="M 6.5, Δσ 80")
plot!(Ti, Sa_M6_Δσ3_κ0, seriescolor=:black, linestyle=:dashdot, lab="M 6.5, Δσ 160")
plot!(Ti, Sa_M7_Δσ1_κ0, seriescolor=:red, linestyle=:solid, lab="M 7.5, Δσ 40")
plot!(Ti, Sa_M7_Δσ2_κ0, seriescolor=:red, linestyle=:solid, lab="M 7.5, Δσ 80")
plot!(Ti, Sa_M7_Δσ3_κ0, seriescolor=:red, linestyle=:dashdot, lab="M 7.5, Δσ 160")
xlabel!("Period (s)")
ylabel!("Spectral acceleration (g)")

plot(pl,pr,layout=(1,2))
savefig("figures/PJSchiouYoungsStressDropAdjustment_v0.pdf")

plot(pl,prt,layout=(1,2))
savefig("figures/PJSchiouYoungsStressDropAdjustmentTheory_v0.pdf")
#savefig("figures/PJSchiouYoungsStressDropAdjustment_v0.png")
